public Optional<PSNTriggerEntity> savePsnTriggerData(FileRawPSNPayload psnPayload) {
    try {
        Optional<PSNTriggerEntity> existingOpt = psnTriggerRepository.findByGtId(psnPayload.getGtId());
        String newStatus = psnPayload.getStatus();

        if (existingOpt.isPresent()) {
            PSNTriggerEntity existing = existingOpt.get();
            String currentStatus = existing.getStatus();

            // Check for final state
            if ("ACCEPT".equalsIgnoreCase(currentStatus) || "REJECT".equalsIgnoreCase(currentStatus)) {
                log.info("GTID {} is in final state: {}. Skipping update.", psnPayload.getGtId(), currentStatus);
                return Optional.of(existing);
            }

            // Update status and increment version
            existing.setStatus(newStatus);
            existing.setVersion(existing.getVersion() + 1);
            // Optionally update other fields as needed
            log.info("Updating existing GTID {} with new status '{}' and version {}", existing.getGtId(), newStatus, existing.getVersion());
            return Optional.of(psnTriggerRepository.saveAndFlush(existing));

        } else {
            // Create a new record
            PSNTriggerEntity newEntity = createPsnTriggerEntity(psnPayload, 1, newStatus);
            log.info("Creating new GTID {} with version 1 and status '{}'", newEntity.getGtId(), newEntity.getStatus());
            return Optional.of(psnTriggerRepository.saveAndFlush(newEntity));
        }

    } catch (DataIntegrityViolationException | ConstraintViolationException e) {
        throw new DuplicatePsnException(DUPLICATE_RECORD_FOUND, "Duplicate PSN Trigger Data", psnPayload.getMessageId(), psnPayload.getCustomerId());
    } catch (Exception ex) {
        throw new FileStatusPsnException("Exception occurred while storing data into DB", ex.getMessage());
    }
}
