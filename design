public Optional<PSNTriggerEntity> savePsnTriggerData(FileRawPSNPayload psnPayload) {
    try {
        Optional<PSNTriggerEntity> existingTriggerOpt = psnTriggerRepository.findByGtid(psnPayload.getGtid());
        int version = 1;
        boolean allowUpdate = true;

        if (existingTriggerOpt.isPresent()) {
            PSNTriggerEntity existingTrigger = existingTriggerOpt.get();
            String existingStatus = existingTrigger.getStatus();

            if ("ACCEPT".equalsIgnoreCase(existingStatus) || "REJECT".equalsIgnoreCase(existingStatus)) {
                allowUpdate = false;
                log.info("GTID {} is in a final state: {}. Skipping update.", psnPayload.getGtid(), existingStatus);
            } else {
                version = existingTrigger.getVersion() + 1;
                log.info("Existing GTID found with updatable state. Incrementing version to {}", version);
            }
        }

        if (!allowUpdate) {
            throw new FinalStatePsnException("GTID is in final state. Cannot be updated.");
        }

        PSNTriggerEntity psnTrigger = createPsnTriggerEntity(psnPayload, version);
        return Optional.of(psnTriggerRepository.saveAndFlush(psnTrigger));
    } catch (DataIntegrityViolationException | ConstraintViolationException e) {
        throw new DuplicatePsnException(DUPLICATE_RECORD_FOUND, "Duplicate PSN Trigger Data", psnPayload.getMessageId(), psnPayload.getCustomerId());
    } catch (Exception ex) {
        throw new FileStatusPsnException("Exception occurred while storing data into DB", ex.getMessage());
    }
}
