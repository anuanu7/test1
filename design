import liquibase.Liquibase;
import liquibase.database.Database;
import liquibase.database.DatabaseFactory;
import liquibase.integration.spring.SpringLiquibase;
import liquibase.resource.FileSystemResourceAccessor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Component;

import javax.sql.DataSource;
import java.sql.Connection;

@Component
@Profile("local")
public class LiquibaseChangelogGenerator implements CommandLineRunner {

    @Autowired
    private DataSource dataSource;

    @Override
    public void run(String... args) throws Exception {
        try (Connection connection = dataSource.getConnection()) {
            Database database = DatabaseFactory.getInstance()
                    .findCorrectDatabaseImplementation(new liquibase.database.jvm.JdbcConnection(connection));
            Liquibase liquibase = new Liquibase(
                    "src/main/resources/db/changelog/db.changelog-master.xml",
                    new FileSystemResourceAccessor(),
                    database
            );
            liquibase.generateChangeLog(new liquibase.structure.core.CatalogAndSchema(null, null), null, null, null);
            System.out.println("Changelog generated successfully.");
        }
    }
}



import liquibase.Scope;
import liquibase.command.CommandScope;
import liquibase.command.core.GenerateChangelogCommandStep;
import liquibase.database.Database;
import liquibase.database.DatabaseFactory;
import liquibase.database.jvm.JdbcConnection;
import liquibase.resource.ClassLoaderResourceAccessor;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import javax.sql.DataSource;
import java.sql.Connection;

@Component
public class LiquibaseRunner implements CommandLineRunner {

    private final DataSource dataSource;

    public LiquibaseRunner(DataSource dataSource) {
        this.dataSource = dataSource;
    }

    @Override
    public void run(String... args) throws Exception {
        // Establish a database connection
        try (Connection connection = dataSource.getConnection()) {
            // Create a Liquibase database object
            Database database = DatabaseFactory.getInstance().findCorrectDatabaseImplementation(new JdbcConnection(connection));

            // Set up the command to generate the changelog
            CommandScope generateChangelogCommand = new CommandScope("generateChangelog");
            generateChangelogCommand.addArgumentValue(GenerateChangelogCommandStep.CHANGELOG_FILE_ARG, "db/changelog/generated-changelog.xml");
            generateChangelogCommand.addArgumentValue(GenerateChangelogCommandStep.DATABASE_ARG, database);

            // Execute the command
            generateChangelogCommand.execute();

            System.out.println("Changelog generated successfully!");
        }
    }
}
To make testing more efficient, it would help if tickets are not overly dependent on multiple services. Instead of handling large, complex tickets, breaking them down into smaller, manageable pieces will allow us to develop and test faster
