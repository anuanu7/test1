
@Async("taskExecutor")
public void trackProcessedRecords(String gbid, int expectedRecords) {
    int retries = 0;
    int maxRetries = 10;
    int waitTime = 1000; // Start with 1 second

    while (retries < maxRetries) {
        try {
            // Poll the second microservice for processed records
            ResponseEntity<ProcessedRecordsResponse> response = restTemplate
                .getForEntity("http://second-microservice/processed-records/" + gbid, ProcessedRecordsResponse.class);

            int processedRecords = response.getBody().getProcessedCount();

            if (processedRecords >= expectedRecords) {
                // Once the expected records are processed, proceed to next step
                proceedToNextStep(gbid);
                break;
            }

            // Exponential backoff before next poll
            Thread.sleep(waitTime);
            waitTime *= 2;
            retries++;

        } catch (Exception e) {
            retries++;
            // Handle failure, wait and retry
            Thread.sleep(waitTime);
            waitTime *= 2;
        }
    }

    if (retries >= maxRetries) {
        System.out.println("GBID " + gbid + " failed after " + maxRetries + " retries.");
    }
}

public void proceedToNextStep(String gbid) {
    // Logic to send the batch to another microservice or further processing
    System.out.println("Proceeding with GBID " + gbid);
    restTemplate.postForEntity("http://third-microservice/process-batch", gbid, String.class);
}

