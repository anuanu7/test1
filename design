ðŸ“˜ k6 Performance Testing POC â€“ Customer Services APIs
What is k6
k6 is an open-source tool for performance and load testing of APIs. It allows you to write test scenarios in JavaScript, simulate multiple virtual users (VUs), and integrate tests into CI/CD pipelines like GitLab. It's lightweight, developer-friendly, and ideal for automation.

POC Objective
Evaluate k6 for performance testing of microservices

Implement dynamic JWT-based authentication

Simulate authenticated API calls with real customer data

Run tests both locally and via GitLab CI

Build a modular, maintainable test framework

Project Structure
kotlin
Copy
Edit
k6-tests/
â”œâ”€â”€ main.js               â†’ Orchestrator: token generation + test execution
â”œâ”€â”€ config.js             â†’ Shared constants (BASE_URL)
â”œâ”€â”€ data/
â”‚   â””â”€â”€ customer_ids.txt  â†’ Customer ID inputs for data-driven tests
â”œâ”€â”€ modules/
â”‚   â”œâ”€â”€ getPaymentPref.js
â”‚   â”œâ”€â”€ getCustChannelRef.js
â”‚   â””â”€â”€ getPSNPreferences.js
â””â”€â”€ README.md             â†’ Documentation and usage guide
JWT Token Handling
Token is generated dynamically before test execution using a POST request:

nginx
Copy
Edit
POST https://.../jwtutility/jwt
Request payload includes:

alg: RS256

typ: JWT

aud: rbsg.banklinedirectdigital.pre-prd.bdd-ms-customer-process

exp: 1 hour from now

Token is passed in each API call using:

css
Copy
Edit
Header: iam-claimsetjwt
APIs Covered in the Test
Endpoint	Method	Authentication	Description
/getPaymentPref/{custId}	GET	Yes	Returns customer payment preferences
/getCustChannelRefForPhysDest	POST	Yes	Accepts JSON payload to resolve channel reference
/v1/getPSNPreferences/{custId}	GET	Yes	Fetches PSNP preferences for a customer

Test Execution
Running Locally
bash
Copy
Edit
k6 run main.js
Running in GitLab CI
yaml
Copy
Edit
script:
  - k6 run --summary-export=result.json main.js
artifacts:
  paths:
    - result.json
The results are exported to result.json for downstream analysis or archiving.

Sample Test Output
yaml
Copy
Edit
âœ“ status is 200 ....................: 100%
âœ“ response includes custId ........: 100%
http_req_duration .................: avg=42ms, p(95)=63ms
http_req_failed ...................: 0.00%
iterations ........................: 50
vus ...............................: 10
Observations
Dynamic JWT authentication worked reliably across all endpoints

All endpoints returned expected responses with low latency

Modular design makes it easy to scale and add new tests

Some initial test failures were due to invalid test data, resolved with a curated customer_ids.txt

Next Steps
Add performance thresholds for SLA enforcement (e.g., 95% of requests < 100ms)

Integrate with monitoring (e.g., Grafana via InfluxDB)

Automate test execution post-deploy via GitLab

Expand test coverage to additional services

Related Resources
GitLab Repository: (Add link here)

JWT Utility API: (Add link if documented)

k6 Documentation: https://k6.io/docs
